int* intToRgba(int rgb) {\nint result[4];\nresult[0] = (rgb >> 16) & 0xff;\nresult[1] = (rgb >>  8) & 0xff;\nresult[2] = (rgb  ) & 0xff;\nresult[3] = (rgb >> 24) & 0xff;\nreturn result;\n}\nint rgbToInt(int r,int g,int b) {\nif(r>255) {\nr=255;\n\n}\nif(g>255) {\ng=255;\n}\nif(b>255) {\nb=255;\n}\nif(r<0) {\nr=0;\n}\nif(g<0) {\ng=0;\n}\nif(b<0) {\nb=0;\n}\nreturn 0xFF000000 | ((r << 16) & 0x00FF0000) | ((g << 8) & 0x0000FF00) | (b & 0x000000FF);\n}\nfloat colorDistance(int* c1, int* c2) {\nint rmean = (c1[0] + c2[0]) / 2;\nint r = c1[0] - c2[0];\nint g = c1[1] - c2[1];\nint b = c1[2] - c2[2];\nreturn sqrt((float)((((512+rmean)*r*r)>>8) + 4*g*g + (((767-rmean)*b*b)>>8)));\n}\nint* getNearlyColor(__global int *palette,int colorCount,int* rgb) {\nint min = colorDistance(intToRgba(palette[0]),rgb);\nint minIndex = 0;\nint* minColor;\nfor (int i=1;i<colorCount;i++) {\nint* tempColor = intToRgba(palette[i]);\nint temp = colorDistance(tempColor,rgb);\nif(temp<min) {\nmin = temp;\nminIndex = i;\nminColor=tempColor;\n}\n}\nint result[8];\nresult[0]=min;\nresult[1]=minIndex+4;\nresult[2]=minColor[0];\nresult[3]=minColor[1];\nresult[4]=minColor[2];\nresult[5]=rgb[0]-result[2];\nresult[6]=rgb[1]-result[3];\nresult[7]=rgb[2]-result[4];\nreturn result;\n}\n__kernel void dither(__global int *colors,__global int *palette,__global int *settings,__global char *result,__global int* temp) {\nint gid = get_global_id(0);\nint width = settings[0];\nint height = settings[1];\nint colorCount = settings[2];\nint size = width*height;\nwhile (temp[0]<gid)\n{\n}\nint* rgba = intToRgba(colors[gid]);\nif(rgba[3]!=255) {\nresult[gid]=0;\nreturn;\n}\nint* near = getNearlyColor(palette,colorCount,rgba);\ncolors[gid] = rgbToInt(near[2],near[3],near[4]);\nresult[gid] = (char)((near[1] / 4) << 2 | (near[1] % 4) & 3);\nint x = gid%width;\nint y = gid/width;\nif(!(x == width)-1) {\nint index = width*y+x+1;\nint* rgba_ = intToRgba(colors[index]);\nif(rgba_[3]==255) {\ncolors[index]=rgbToInt(rgba_[0]+near[5]*7/16,rgba_[1]+near[6]*7/16,rgba_[2]+near[7]*7/16);\n}\nif(!(y == height)-1) {\nint index_ = width*(y+1)+x+1;\nrgba_ = intToRgba(colors[index_]);\nif(rgba[3]==255) {\ncolors[index_]=rgbToInt(rgba_[0]+near[5]*1/16,rgba_[1]+near[6]*1/16,rgba_[2]+near[7]*1/16);\n}\n}\n}\nif(!(y == height)-1) {\nint index = width*(y+1)+x;\nint* rgba_ = intToRgba(colors[index]);\nif(rgba_[3]==255) {\ncolors[index]=rgbToInt(rgba_[0]+near[5]*7/16,rgba_[1]+near[6]*7/16,rgba_[2]+near[7]*3/16);\n}\nif(x != 0) {\nint index_ = width*(y+1)+x-1;\nrgba_ = intToRgba(colors[index_]);\nif(rgba[3]==255) {\ncolors[index_]=rgbToInt(rgba_[0]+near[5]*1/16,rgba_[1]+near[6]*1/16,rgba_[2]+near[7]*5/16);\n}\n}\n}\ntemp[0]++;\n}